## jsconfig.json
Visual Studio Code的JavaScript支持可以在两种不同的模式下运行：
文件范围 - 没有jsconfig.json：在此模式下，在Visual Studio Code中打开的JavaScript文件被视为独立单元。 只要文件a.js没有显式引用文件b.ts（使用///引用指令或CommonJS模块），两个文件之间就没有共同的项目上下文。
显式项目 - 使用jsconfig.json：JavaScript项目是通过jsconfig.json文件定义的。 目录中存在此类文件表示该目录是JavaScript项目的根目录。 文件本身可以选择列出属于项目的文件，要从项目中排除的文件，以及编译器选项（见下文）。
当您在工作空间中有一个定义项目上下文的jsconfig.json文件时，JavaScript体验会得到改进。 因此，当您在新工作空间中打开JavaScript文件时，我们提供了一个创建jsconfig.json文件的提示。
menorepo项目 每个工程下都可以有jsconfig.json
```json
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "exclude": ["node_modules", "dist"]
}

```
参考链接：https://zhuanlan.zhihu.com/p/55644953

## eslint
依赖处理
```json
"devDependencies": {
    "@rushstack/eslint-patch": "^1.8.0",
    "@unocss/preset-rem-to-px": "^0.60.2",
    "@vitejs/plugin-vue": "^5.0.4",
    "@vitejs/plugin-vue-jsx": "^3.1.0",
    "@vue/eslint-config-prettier": "^9.0.0",
    "eslint": "^8.57.0",
    "eslint-plugin-vue": "^9.23.0",
    "prettier": "^3.2.5",
    "unocss": "^0.60.2",
    "unocss-preset-scrollbar": "^0.3.1",
    "vite": "^5.2.8",
    "vite-plugin-vue-devtools": "^7.0.25"
  }
```
.eslintrc.cjs
```js
require('@rushstack/eslint-patch/modern-module-resolution');

module.exports = {
  root: true,
  env: {
    browser: true,
    es2021: true,
    node: true,
  },
  extends: [
    'plugin:vue/vue3-essential',
    'eslint:recommended',
    '@vue/eslint-config-prettier/skip-formatting',
  ],
  parserOptions: {
    ecmaVersion: 12,
    sourceType: 'module',
  },
  plugins: [
    'vue',
  ],
  rules: {
    // override/add rules settings here, such as:
    // "vue/no-unused-vars": "error"
    quotes: ['error', 'single', { allowTemplateLiterals: true }], //使用单引号
    'quote-props': ['error', 'as-needed'],      //对象字面值属性名称使用单引号
    'no-debugger': ['warn'],                    //禁止使用debugger
    'no-dupe-args': ['error'],                  //禁止函数定义中出现重复参数
    'no-dupe-keys': ['error'],                  //禁止对象定义中出现重复的key
    'no-duplicate-case': ['error'],             //禁止switch中出现重复的case条件
    'no-empty-character-class': ['error'],      //禁止正则表达式中出现空的类
    'no-empty': ['off'],                        //禁止内容为空的块语句，增加注释可以避免错误
    'no-extra-semi': ['error'],                 //禁止不必要的分号
    'no-func-assign': ['error'],                //禁止对已定义的函数进行重新赋值
    'no-invalid-regexp': ['error'],             //禁止RegExp函数中出现无效的正则字符串
    'no-regex-spaces': ['error'],               //禁止正则表达式中出现多个空格
    'no-sparse-arrays': ['error'],              //禁止稀疏数组
    'no-unexpected-multiline': ['error'],       //禁止错误的分行
    'no-unreachable': ['error'],                //禁止不可能执行到的代码
    'no-unsafe-finally': ['error'],             //禁止finally块中出现控制语句
    'use-isnan': ['error'],                     //使用isNaN函数进行NaN判断
    'valid-jsdoc': ['off'],                     //使用 JSDoc 注释风格
    'valid-typeof': ['error'],                  //禁止将typeof表达式的结果与无效的字符串进行比较
    'no-cond-assign': ['off'],                  //禁止条件语句的条件中出现赋值运算符

    // Best Practices
    curly: ['error', 'multi-line'],             //if, while, for后面的{}不能省略
    'default-case': ['warn'],                   //switch语句最后必须有default
    eqeqeq: ['error'],                          //必须使用全等
    'no-alert': ['warn'],                       //禁止使用alert confirm prompt
    'no-empty-function': ['off'],               //禁止定义空函数（增加注释可避免报错）
    'no-eval': ['error'],                       //禁止使用eval
    'no-extend-native': ['error'],              //禁止扩展native对象
    'no-extra-bind': ['error'],                 //禁止不必要的函数绑定
    'no-implied-eval': ['error'],               //禁止使用隐式eval
    'no-multi-spaces': [                        //不能用多余的空格
      'error',
      { ignoreEOLComments: true },
    ],
    radix: ['warn'],                            //parseInt必须指定第二个参数

    // Variables
    'no-shadow-restricted-names': ['error'],    //禁止声明、使用与关键词或全局对象同名的变量、参数、或函数
    'no-undef-init': ['error'],                 //禁止初始化变量为undefined
    'no-undef': ['error'],                      //禁止使用未声明的变量
    'no-var': ['error'],                        //禁止使用var声明变量
    'no-unused-vars': ['warn'],                 //禁止定义了又不使用的变量
    'no-use-before-define': [                   //禁止在声明变量前使用变量
      'off',
      {
        functions: false, //不会影响未声明使用的函数
        classes: false,   //不会影响未声明使用的类
      },
    ],

    // Stylistic Issues
    'array-bracket-spacing': ['error', 'never'], //数组里面有多余的空格
    'brace-style': ['error', '1tbs'],            //大括号风格
    'comma-dangle': [                            //对象不能尾随逗号
      'error',
      {
        arrays: 'always-multiline',
        objects: 'always-multiline',
        imports: 'always-multiline',
        exports: 'always-multiline',
        functions: 'never',
      },
    ],
    'comma-spacing': ['error', { before: false, after: true }],      //逗号前后的空格
    'comma-style': ['error', 'last'],                                //逗号风格，换行时在行首还是行尾
    'computed-property-spacing': ['error', 'never'],                 //获取对象属性，key前后空格
    indent: [                                                        //代码缩进
      'error',
      2,
      {
        SwitchCase: 1,
        ignoredNodes: ['TemplateLiteral'],
      },
    ],
    'key-spacing': [                                                 //对象的键和冒号间的空格
      'error',
      {
        beforeColon: false,
        afterColon: true,
        mode: 'strict',
      },
    ],
    'keyword-spacing': ['error', { before: true, after: true }],     //条件语句和括号间的空格
    'new-cap': ['error', { capIsNew: false }],                                            //new类名大写开头
    'new-parens': ['error'],                                         //new时必须加小括号
    'no-array-constructor': ['error'],                               //使用[]构造
    'no-mixed-spaces-and-tabs': ['error'],                           //禁止混用tab和空格
    'no-multiple-empty-lines': ['error', { max: 2 }],                //空行最多不能超过2行
    'no-new-object': ['error'],                                      //禁止使用new Object()
    'no-spaced-func': ['error'],                                     //函数调用时，函数名与()之间不能有空格
    'func-call-spacing': ['error'],                                  //函数调用时，函数名与()之间不能有空格
    'no-trailing-spaces': ['error', { skipBlankLines: true }],       //一行结束后面不要有空格
    'no-unneeded-ternary': ['error'],                                //禁止不必要的三元表达式
    'no-whitespace-before-property': ['error'],                      //属性访问点号后没有空格
    'one-var': ['error', 'never'],                                   //每一行一个var/let/const声明
    'padded-blocks': ['error', 'never'],                             //块语句内行首/行尾是否要空行
    'semi-spacing': ['error', { before: false, after: true }],       //分号前后空格
    semi: ['error', 'always'],                                       //语句强制分号结尾
    'space-before-blocks': ['error', 'always'],                      //条件判断语句块和{之间要不要有空格
    'space-in-parens': ['error', 'never'],                           //小括号里面要不要有空格
    'space-infix-ops': ['error'],                                    //二元运算符周围要不要有空格
    'space-unary-ops': ['error', { words: true, nonwords: false }],  //一元运算符的前/后要不要加空格
    'arrow-parens': ['error', 'as-needed'],                          //箭头函数只有一个参数时可以省略括号
    'arrow-spacing': ['error', { before: true, after: true }],         //箭头函数的箭头前后必须有空格
    'rest-spread-spacing': ['error', 'never'],                       //不允许rest参数和扩展运算符与他们的参数之间有空格
  },
};

```
prettierrc.cjs
```js
// 以下配置视自己情况而定
module.exports = {
  $schema: 'https://json.schemastore.org/prettierrc',
  tabWidth: 2,               // 使用2个空格缩进
  useTabs: false,            // 不使用制表缩进,而使用空格
  semi: true,               // 代码结尾是否加分号
  // trailingComma: 'none',     // 代码末尾不需要逗号  参考 https://prettier.io/docs/en/options.html#prose-wrap
  trailingComma: 'es5', // 行尾逗号,默认none,可选 none|es5|all
  // es5 包括es5中的数组、对象
  // all 包括函数对象等所有可选
  singleQuote: true,         // 是否使用单引号
  printWidth: 120,           // 超过多少字符强制换行
  arrowParens: 'avoid',      // 单个参数的箭头函数不加括号 arg => arg
  bracketSpacing: true,      // 对象大括号内两边是否加空格 { a:0 }
  endOfLine: 'auto',         // 文件换行格式 LF/CRLF
  quoteProps: 'as-needed',   // 对象的key仅在必要时用引号
  jsxSingleQuote: false,     // jsx不使用单引号,而使用双引号
  jsxBracketSameLine: false, // jsx标签的反尖括号需要换行
  rangeStart: 0,             // 每个文件格式化的范围是文件的全部内容
  rangeEnd: Infinity,        // 结尾
  requirePragma: false,      // 不需要写文件开头的 @prettier
  insertPragma: false,       // 不需要自动在文件开头插入 @prettier
  proseWrap: 'preserve',     // 使用默认的折行标准 参考 https://prettier.io/docs/en/options.html#trailing-commas
  htmlWhitespaceSensitivity: 'css',  // 根据显示样式决定html要不要折行
};
```

## .vscode
settings.json
```json
{
  "unocss.root": [
    "packages/cloud-manage/"
  ],
  "editor.codeActionsOnSave": {
    "source.fixAll": "explicit"
  },
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode"
}
```
extensions.json
```json
{
  "recommendations": [
    "Vue.volar",
    "dbaeumer.vscode-eslint",
    "esbenp.prettier-vscode"
  ]
}

```
